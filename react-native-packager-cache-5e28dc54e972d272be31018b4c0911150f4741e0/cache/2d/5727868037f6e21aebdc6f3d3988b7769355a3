'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _expo = require('expo');

var _vectorIcons = require('@expo/vector-icons');

var regeneratorRuntime = require('regenerator-runtime');

var RegisterScreen = function (_Component) {
  babelHelpers.inherits(RegisterScreen, _Component);
  babelHelpers.createClass(RegisterScreen, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      return regeneratorRuntime.async(function componentDidMount$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(_expo.Font.loadAsync({
                'pomeranian': require('../assets/fonts/pomeranian.ttf')
              }));

            case 2:

              this.setState({ fontLoaded: true });

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }]);

  function RegisterScreen(props) {
    babelHelpers.classCallCheck(this, RegisterScreen);

    var _this = babelHelpers.possibleConstructorReturn(this, (RegisterScreen.__proto__ || Object.getPrototypeOf(RegisterScreen)).call(this, props));

    _this.state = {
      fontLoaded: false
    };

    _this.UserRegistrationFunction = function () {
      var UserName = _this.state.UserName;
      var UserEmail = _this.state.UserEmail;
      var UserPassword = _this.state.UserPassword;


      fetch('http://192.168.100.29/Mare/user_registration.php', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({

          name: UserName,

          email: UserEmail,

          password: UserPassword

        })

      }).then(function (response) {
        return response.json();
      }).then(function (responseJson) {

        _reactNative.Alert.alert(responseJson);
      }).catch(function (error) {
        console.error(error);
      });
    };

    _this.state = {

      UserName: '',
      UserEmail: '',
      UserPassword: '',
      value: 0
    };

    return _this;
  }

  babelHelpers.createClass(RegisterScreen, [{
    key: 'handleOnPress',
    value: function handleOnPress(value) {
      this.setState({ value: value });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        _reactNative.View,
        { style: styles.container },
        _react2.default.createElement(
          _reactNative.Image,
          { source: require('../img/signin1.png'), style: styles.backgroundImage },
          _react2.default.createElement(
            _reactNative.View,
            { style: styles.containerImage },
            _react2.default.createElement(
              _reactNative.View,
              { style: styles.textHeader },
              _react2.default.createElement(
                _reactNative.TouchableOpacity,
                { style: { flex: 0.2 } },
                _react2.default.createElement(_reactNative.Image, { source: require('../img/Xbutton.png'), style: { flex: 0.5, width: null, height: null, marginTop: 10 } })
              )
            ),
            _react2.default.createElement(
              _reactNative.View,
              { style: styles.fbButton },
              _react2.default.createElement(
                _reactNative.TouchableOpacity,
                { style: { flex: 1 } },
                _react2.default.createElement(_reactNative.Image, { source: require('../img/FBbutton.png'), style: { flex: 1, width: null, height: null } })
              )
            ),
            _react2.default.createElement(_reactNative.View, { style: styles.orButton }),
            _react2.default.createElement(
              _reactNative.View,
              { style: styles.nameInput },
              _react2.default.createElement(_reactNative.TextInput, {
                style: { flex: 1, paddingLeft: 40 },
                underlineColorAndroid: 'transparent',
                placeholder: 'Name',
                placeholderTextColor: '#47E5B3',
                onChangeText: function onChangeText(UserName) {
                  return _this2.setState({ UserName: UserName });
                }
              })
            ),
            _react2.default.createElement(
              _reactNative.View,
              { style: styles.emailInput },
              _react2.default.createElement(_reactNative.TextInput, {
                style: { flex: 1, paddingLeft: 40 },
                underlineColorAndroid: 'transparent',
                keyboardType: 'email-address',
                placeholder: 'E-mail',
                placeholderTextColor: '#47E5B3',
                onChangeText: function onChangeText(UserEmail) {
                  return _this2.setState({ UserEmail: UserEmail });
                }
              })
            ),
            _react2.default.createElement(
              _reactNative.View,
              { style: styles.passwordInput },
              _react2.default.createElement(_reactNative.TextInput, {
                style: { flex: 1, paddingLeft: 5 },
                underlineColorAndroid: 'transparent',
                placeholder: 'Password',
                placeholderTextColor: '#47E5B3',
                onChangeText: function onChangeText(UserPassword) {
                  return _this2.setState({ UserPassword: UserPassword });
                },
                secureTextEntry: true
              }),
              _react2.default.createElement(
                _reactNative.TouchableOpacity,
                null,
                _react2.default.createElement(_vectorIcons.Ionicons, { name: 'ios-eye', size: 20 })
              )
            ),
            _react2.default.createElement(_reactNative.View, { style: styles.checkBox }),
            _react2.default.createElement(
              _reactNative.View,
              { style: styles.registerButton },
              _react2.default.createElement(
                _reactNative.TouchableOpacity,
                { style: { flex: 1 }, onPress: this.UserRegistrationFunction },
                _react2.default.createElement(_reactNative.Image, { source: require('../img/signinbutton.png'), style: { flex: 1, width: null, height: null } })
              )
            ),
            _react2.default.createElement(_reactNative.View, { style: styles.loginButton })
          )
        )
      );
    }
  }]);
  return RegisterScreen;
}(_react.Component);

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'white'
  },
  backgroundImage: {
    flex: 1,
    height: null,
    width: null

  },
  containerImage: {
    flex: 1

  },
  textHeader: {
    flex: 1.1,
    flexDirection: 'row',
    paddingHorizontal: 23,
    justifyContent: 'flex-end',
    alignItems: 'center'

  },
  fbButton: {
    flex: 0.85,
    marginLeft: 3,
    paddingTop: 2,
    paddingHorizontal: 23
  },
  orButton: {
    flex: 1.3

  },
  nameInput: {
    flex: 0.9,
    paddingHorizontal: 23
  },
  emailInput: {
    flex: 0.9,
    paddingHorizontal: 23
  },
  passwordInput: {
    flex: 0.9,
    flexDirection: 'row',
    paddingHorizontal: 58,

    justifyContent: 'center',
    alignItems: 'center'
  },
  checkBox: {
    flex: 1.2

  },
  registerButton: {
    flex: 0.7,
    paddingHorizontal: 18,
    marginLeft: 5
  },
  loginButton: {
    flex: 1.2,

    justifyContent: 'center',
    backgroundColor: 'rgba(0,0,0,0)',
    paddingLeft: 20
  }
});

exports.default = RegisterScreen;