Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = '/home/ducanh/Mare/node_modules/react-native-flexi-radio-button/lib/radioGroup.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

var _radioButton = require('./radioButton');

var _radioButton2 = _interopRequireDefault(_radioButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
    RadioGroup: {
        displayName: 'RadioGroup'
    }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: '/home/ducanh/Mare/node_modules/react-native-flexi-radio-button/lib/radioGroup.js',
    components: _components,
    locals: [module],
    imports: [_react3.default]
});

function _wrapComponent(id) {
    return function (Component) {
        return _reactTransformHmrLibIndexJs2(Component, id);
    };
}

var defaultSize = 20;
var defaultThickness = 1;
var defaultColor = '#007AFF';

var RadioGroup = _wrapComponent('RadioGroup')(function (_Component) {
    _inherits(RadioGroup, _Component);

    function RadioGroup(props, context) {
        _classCallCheck(this, RadioGroup);

        var _this = _possibleConstructorReturn(this, (RadioGroup.__proto__ || Object.getPrototypeOf(RadioGroup)).call(this, props, context));

        _this.state = {
            selectedIndex: _this.props.selectedIndex
        };
        _this.prevSelected = _this.props.selectedIndex;
        _this.onSelect = _this.onSelect.bind(_this);
        return _this;
    }

    _createClass(RadioGroup, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.selectedIndex != this.prevSelected) {
                this.prevSelected = nextProps.selectedIndex;
                this.setState({
                    selectedIndex: nextProps.selectedIndex
                });
            }
        }
    }, {
        key: 'getChildContext',
        value: function getChildContext() {
            return {
                onSelect: this.onSelect,
                size: this.props.size,
                thickness: this.props.thickness,
                color: this.props.color,
                highlightColor: this.props.highlightColor
            };
        }
    }, {
        key: 'onSelect',
        value: function onSelect(index, value) {
            this.setState({
                selectedIndex: index
            });
            if (this.props.onSelect) this.props.onSelect(index, value);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var radioButtons = _react3.default.Children.map(this.props.children, function (radioButton, index) {
                var isSelected = _this2.state.selectedIndex == index;
                var color = isSelected && _this2.props.activeColor ? _this2.props.activeColor : _this2.props.color;
                return _react3.default.createElement(
                    _radioButton2.default,
                    _extends({
                        color: color,
                        activeColor: _this2.props.activeColor
                    }, radioButton.props, {
                        index: index,
                        isSelected: isSelected,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 58
                        }
                    }),
                    radioButton.props.children
                );
            });

            return _react3.default.createElement(
                _reactNative.View,
                { style: this.props.style, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 71
                    }
                },
                radioButtons
            );
        }
    }]);

    return RadioGroup;
}(_react2.Component));

exports.default = RadioGroup;


RadioGroup.childContextTypes = {
    onSelect: _propTypes2.default.func.isRequired,
    size: _propTypes2.default.number.isRequired,
    thickness: _propTypes2.default.number.isRequired,
    color: _propTypes2.default.string.isRequired,
    activeColor: _propTypes2.default.string,
    highlightColor: _propTypes2.default.string
};

RadioGroup.defaultProps = {
    size: defaultSize,
    thickness: defaultThickness,
    color: defaultColor,
    highlightColor: null
};